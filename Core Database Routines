/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Application;


import java.io.File;
import java.io.RandomAccessFile;
import java.util.ArrayList;
import java.util.Calendar;


/**
 *
 * @author Russell Brown
 */
public class Database {
    
    public static final int buffer_length = 10000000;
    
    
    public static void get_beginning_of_line(RandomAccessFile f) throws Exception
    {
                        
        long position = f.getChannel().position();
        
        if (position > 0)
        {

            while (true)
            {
                f.getChannel().position(position);

                char c = (char)f.read();

                if (c == '\n') break;
                
                position--;
                
                if (position <= 0) break;

            }

            if (position > 0)
            {
                f.getChannel().position(position+1);
            }
            else
            {
                f.getChannel().position(position);
            }
            
        }
        
    }
    
    
    
    
    public static void move_everything_up(RandomAccessFile f, long starting_position, long ending_position) throws Exception
    {
        // move everything up
           
            long next_write_pos = starting_position;
            long next_read_pos = ending_position;
            
            int length = buffer_length;
            boolean end_of_file = false;
            
            while (true)
            {

                f.getChannel().position(next_read_pos);
                
                if (f.getChannel().position() + length > f.getChannel().size())
                {
                    length = (int)(f.getChannel().size() - f.getChannel().position());
                    end_of_file = true;
                }

                byte[] data = new byte[length];

                f.read(data);

                next_read_pos = f.getChannel().position();

                f.getChannel().position(next_write_pos);            

                f.write(data);
                
                if (end_of_file == true) break;
                
                next_write_pos = f.getChannel().position();
            
            }
            
            f.setLength(f.getChannel().position());
        
    }
    
    public static void move_everything_down(RandomAccessFile f, long starting_position, String string) throws Exception
    {
        
            // move everything down
                        
                    
            int length = buffer_length;
            
            f.getChannel().position(f.getChannel().size());
        
            
            boolean end_of_data = false;
            
            if (f.getChannel().position() - length < starting_position)
            {
                length = (int)(f.getChannel().position() - starting_position);
                end_of_data = true;
            }

            
            long position = f.getChannel().position() - length;


            while (true)
            {

                byte[] data = new byte[length];


                f.getChannel().position(position);
                f.read(data);

                f.getChannel().position(position + string.length());

                f.write(data);
                

                if (end_of_data == true) break;


                if (position - length < starting_position)
                {
                    length = (int)(position - starting_position);
                    position = starting_position;
                    end_of_data = true;
                }
                else
                {
                    position -= length;

                }

            }
    }
    
    
    public static void create_database(String database_name) throws Exception
    {
        
        String path = System.getProperty("user.dir") + "\\" + database_name + ".dat";   
        
        File f = new File(path);        
                
        if (f.exists()) f.delete();        
        
        f.createNewFile();
        
        RandomAccessFile fl = new RandomAccessFile(path, "rw");
        
        fl.write("tables:\n".getBytes());
       
        fl.write("data:\n".getBytes());
               
        fl.close();
        
    }
    
    
    
    
    
    public static boolean check_database(String database_name) throws Exception
    {
        boolean result = false;
        
        String path = System.getProperty("user.dir") + "\\" + database_name + ".dat";   
        
        File f = new File(path);        
                
        if (f.exists())
        {
            result = true;
        }
        
        return result;
        
    }
    
    public static void create_table(String database_name, String table_name, String[] column_names, String[] column_types) throws Exception
    {
        
        String path = System.getProperty("user.dir") + "\\" + database_name + ".dat";   
        
        RandomAccessFile f = new RandomAccessFile(path, "rw");
        
        // get the insert position for the table
        
        f.getChannel().position(0);
        while (true)
        {
            String line = f.readLine();
            if (line.contains("tables:")) break;            
            if (f.getChannel().position() >= f.getChannel().size()) break;
        }
        
        boolean exists = false;
        long starting_position = 0;
        while (true)
        {
            starting_position = f.getChannel().position();
            String line = f.readLine();
            
            if (line.contains(table_name))
            {
                exists = true;
                break;
            }
            
            if (line.contains("data:")) break;            
            if (f.getChannel().position() >= f.getChannel().size()) break;
        }
        
        if (exists == false)
        {
            
            
             // format string
            
            String string = table_name + "," + column_names.length + ",";

            for (int i = 0; i < column_names.length; i++)
            {
                string += column_names[i].length() + ",";
                string += column_names[i] + ",";
            }

            for (int i = 0; i < column_types.length; i++)
            {
                string += column_types[i].length() + ",";
                string += column_types[i];
                
                if (i < column_types.length - 1) string += ",";
            }
            
            string += "\n";
            
            
            move_everything_down(f, starting_position, string);
        
            
        
            // write string
        
            f.getChannel().position(starting_position);            
            f.write(string.getBytes());

        }
        
        
        
        f.close();
        
        
    }
    
    
    
    
    
    public static ArrayList get_tables(String database_name) throws Exception 
    {
        ArrayList data = new ArrayList();
        
        
        String path = System.getProperty("user.dir") + "\\" + database_name + ".dat";   
        
        
        RandomAccessFile f = new RandomAccessFile(path, "rw");
        
        f.getChannel().position(0);
        while (true)
        {
            String line = f.readLine();
            if (line.contains("tables:")) break;            
            if (f.getChannel().position() >= f.getChannel().size()) break;
        }
        
        
        String table_string = "";
        while (true)
        {
            table_string = f.readLine();
            if (table_string.contains("data:")) break;            
            if (f.getChannel().position() >= f.getChannel().size()) break;
            data.add(table_string);
        }
        
        f.close();
        
        
        return data;
    }
    
    public static void insert(String database_name, String table_name, String[] array) throws Exception 
    {
        
        
        String path = System.getProperty("user.dir") + "\\" + database_name + ".dat";   
        
        
        RandomAccessFile f = new RandomAccessFile(path, "rw");
        
        
        // get the starting size
        f.getChannel().position(0);
        while (true)
        {
            String line = f.readLine();
            if (line.contains("data:")) break;            
            if (f.getChannel().position() >= f.getChannel().size()) break;
        }
        
        long size = f.getChannel().position();
        
        // check that table exists
        
        f.getChannel().position(0);
        while (true)
        {
            String line = f.readLine();
            if (line.contains("tables:")) break;            
            if (f.getChannel().position() >= f.getChannel().size()) break;
        }
        
        boolean exists = false;
        String table_string = "";
        while (true)
        {
            table_string = f.readLine();
            if (table_string.contains(table_name))
            {
                exists = true;
                break;
            }
            
            if (table_string.contains("data:")) break;            
            if (f.getChannel().position() >= f.getChannel().size()) break;
        }
        
        if (exists == true)
        {
            int record_number = 0;
            
            if (f.getChannel().size() > size)
            {
                    // get the next record number
                f.getChannel().position(f.getChannel().size()-2);
                get_beginning_of_line(f);
                String line = f.readLine();
                String[] line_array = line.split(",");
                record_number = Integer.valueOf(line_array[0])+1;
            }
            
            // format insert string
            
            String line = record_number + "," + table_name + ",";
            for (int i = 0; i < array.length; i++)
            {
                line += array[i].length();
                line += ",";
            }
            for (int i = 0; i < array.length; i++)
            {
                line += array[i];
            }
            
            
            
            line += "\n";
            
            // write the string
            
            
            f.getChannel().position(f.getChannel().size());
            
            f.write(line.getBytes());
            
//            System.out.println("written line:  " + line);
               
            
//            long position = f.getChannel().position();
//            long position2 = position + line.length();
//            
//            f.write(line.getBytes());
            
            
//            // check
//            
//            if (f.getChannel().position() != position2)
//            {
//                f.setLength(position);
//            }
            
//            f.getChannel().position(position);
//            
//            String string = "";
//            
//            while (true)
//            {
//                string += (char)f.read();
//                
//                if (f.getChannel().position() >= position2) break;
//            }
//            
//            if (line.equals(string) == false) throw new Exception("interupted operation during insert");
//            
            
        }
        
        
        f.close();
        
    }
    
    
    
    public static ArrayList[] get_table_info(String database_name, String table_name) throws Exception
    {
        ArrayList list = new ArrayList();
        ArrayList list2 = new ArrayList();
        
        String path = System.getProperty("user.dir") + "\\" + database_name + ".dat";   
        
        RandomAccessFile f = new RandomAccessFile(path, "rw");
                
        f.getChannel().position(0);
        
        boolean look_at_tables = false;
        
        while (true)
        {
            String line = f.readLine();
            
            if (line.contains("data:"))
            {
                look_at_tables = false;
                break;
            }
            
            if (look_at_tables == true)
            {
                String[] array2 = line.split(",");
                
                if (array2[0].equals(table_name))
                {
                   
                    {
                        int cols = Integer.valueOf(array2[1]);
                        
                        int ci = 0;
                        
                        int start = 0;
                        
                        for (int i = 0; i < line.length(); i++)
                        {
                            
                            if (line.charAt(i) == ',')
                            {
                                ci++;
                                
                                if (ci == 2)
                                {
                                    start = i+1;
                                    break;
                                }
                                
                            } 
                            
                        }
                        
                        // column names
                        
                        int c = start;
                        ci = start;
                        
                        for (int i = 0; i < cols; i++)
                        {

                            String length = "";

                            while (true)
                            {
                                if (line.charAt(ci) == ',')
                                {
//                                    System.out.println(length);
                                    break;
                                }

                                length += line.charAt(ci);

                                c++;
                                ci++;
                                if (ci >= line.length()) break;
                            }

                            int p1 = ci + 1;

                            
                            ci += Integer.valueOf(length) + 1;
                        
                            String value = line.substring(p1, ci);
                            
//                            System.out.println(value);
                            
                            list.add(new Object[]{length, value});
                            
                            ci++;
                        
                        }
                        
//                        System.out.println("---");
                        
                        // column types
                        
                        for (int i = 0; i < cols; i++)
                        {

                            String length = "";

                            while (true)
                            {
                                if (line.charAt(ci) == ',')
                                {
//                                    System.out.println(length);
                                    break;
                                }

                                length += line.charAt(ci);

                                c++;
                                ci++;
                                if (ci >= line.length()) break;
                            }
                            
                            int p1 = ci + 1;

                            
                            ci += Integer.valueOf(length) + 1;
                        
                            String value = line.substring(p1, ci);
                            
//                            System.out.println(value);
                            
                            list2.add(new Object[]{length, value});
                            
                            ci++;
                        }
                        
                        
                        
                    }
                    
                }
                
            }
            
            
            if (line.contains("tables:"))
            {
                look_at_tables = true;
            }
            
            
        }
        
       // System.out.println(list.size() + "  " + list2.size());
        
        f.close();
        
        return new ArrayList[]{list, list2};
    }
    
    public static Object[] get_line_data(int row_count, String input_line) throws Exception
    {
        Object[] arr = null;
        
        String[] line_array = input_line.split(",");
        String table_name = line_array[1];
        
        String path = System.getProperty("user.dir") + "\\" + "database" + ".dat";   
        
        
        RandomAccessFile f = new RandomAccessFile(path, "rw");
        
        
        f.getChannel().position(0);
        while (true)
        {
            String line = f.readLine();
            if (line.contains("tables:")) break;            
            if (f.getChannel().position() >= f.getChannel().size()) break;
        }
        
        boolean exists = false;
        String table_string = "";
        while (true)
        {
            table_string = f.readLine();
            if (table_string.contains(table_name))
            {
                exists = true;
                break;
            }
            
            if (table_string.contains("data:")) break;            
            if (f.getChannel().position() >= f.getChannel().size()) break;
        }
        
        String[] table_array = table_string.split(",");
        int cols = Integer.valueOf(table_array[1]);
        
        
        int[] lengths = new int[cols];

        int sum_lengths = 0;

        for (int i = 0; i < cols; i++)
        {
            lengths[i] = Integer.valueOf(line_array[2+i]);

            sum_lengths += lengths[i];
            
        }

        String string = input_line.substring(input_line.length() - sum_lengths, input_line.length());
        
//        System.out.println(string);

        int p = 0;
        
        ArrayList data = new ArrayList();
        
        data.add(row_count);

        for (int i = 0; i < cols; i++)
        {
            int p2 = p + lengths[i];

            String string2 = string.substring(p, p2);
            
//            System.out.println(string2);

            data.add(string2);

            p = p2;
        }
                      
        arr = new Object[data.size()];
        for (int i = 0; i < data.size(); i++)
        {
            arr[i] = data.get(i);
        }
        
        
        return arr;
    }
    
    public static int get_number_of_columns(String database_name, String table_name) throws Exception
    {
         
        String path = System.getProperty("user.dir") + "\\" + database_name + ".dat";   
        
        RandomAccessFile f = new RandomAccessFile(path, "rw");
        
        
        f.getChannel().position(0);
        while (true)
        {
            String line = f.readLine();
            if (line.contains("tables:")) break;            
            if (f.getChannel().position() >= f.getChannel().size()) break;
        }
        
        boolean exists = false;
        String table_string = "";
        while (true)
        {
            table_string = f.readLine();
            if (table_string.contains(table_name))
            {
                exists = true;
                break;
            }
            
            if (table_string.contains("data:")) break;            
            if (f.getChannel().position() >= f.getChannel().size()) break;
        }
        
        
        String[] table_array = table_string.split(",");
        int cols = Integer.valueOf(table_array[1]);
        
        f.close();
        
        return cols;
        
    }
    
    
    public static Object[] get_line_data2(String database_name, String input_line) throws Exception
    {
        Object[] arr = null;
        
        String[] line_array = input_line.split(",");
        String table_name = line_array[1];
        
        String path = System.getProperty("user.dir") + "\\" + database_name + ".dat";   
        
        
        RandomAccessFile f = new RandomAccessFile(path, "rw");
        
        
        f.getChannel().position(0);
        while (true)
        {
            String line = f.readLine();
            if (line.contains("tables:")) break;            
            if (f.getChannel().position() >= f.getChannel().size()) break;
        }
        
        boolean exists = false;
        String table_string = "";
        while (true)
        {
            table_string = f.readLine();
            if (table_string.contains(table_name))
            {
                exists = true;
                break;
            }
            
            if (table_string.contains("data:")) break;            
            if (f.getChannel().position() >= f.getChannel().size()) break;
        }
        
        
        String[] table_array = table_string.split(",");
        int cols = Integer.valueOf(table_array[1]);
        
        
        int[] lengths = new int[cols];

        int sum_lengths = 0;

        for (int i = 0; i < cols; i++)
        {
            lengths[i] = Integer.valueOf(line_array[2+i]);

            sum_lengths += lengths[i];
            
        }

        String string = input_line.substring(input_line.length() - sum_lengths, input_line.length());
        
//        System.out.println(string);

        int p = 0;
        
        ArrayList data = new ArrayList();
        

        for (int i = 0; i < cols; i++)
        {
            int p2 = p + lengths[i];

            String string2 = string.substring(p, p2);
            

            data.add(string2);

            p = p2;
        }
                      
        arr = new Object[data.size()];
        for (int i = 0; i < data.size(); i++)
        {
            arr[i] = data.get(i);
        }
        
        
        return arr;
    }
    
    
    
    
    
    
    
    public static ArrayList get_row_data(String database_name, int record_number) throws Exception
    {
        
        ArrayList list = new ArrayList();
        ArrayList list2 = new ArrayList();
        
        ArrayList row_data = new ArrayList();
        
        String path = System.getProperty("user.dir") + "\\" + database_name + ".dat";   
        
        
        RandomAccessFile f = new RandomAccessFile(path, "rw");
        
        
        // get the starting position for the data
        f.getChannel().position(0);
        while (true)
        {
            String line = f.readLine();
            if (line.contains("data:")) break;            
            if (f.getChannel().position() >= f.getChannel().size()) break;
        }
        
        
        
        int length = buffer_length;
        boolean end_of_data = false;
        String line = "";
        boolean beginning_of_line = true;
        long line_position = 0;
        
        while (true)
        {
            if (f.getChannel().position() + length > f.getChannel().size())
            {
                length = (int)(f.getChannel().size() - f.getChannel().position());
                end_of_data = true;
            }
        
            byte[] data = new byte[length];
            long starting_position = f.getChannel().position();
            f.read(data);

            for (int i = 0; i < length; i++)
            {
                char c = (char)data[i];
                if (c == '\n')
                {
                    String[] array = line.split(",");

                    if (Integer.valueOf(array[0]) == record_number)
                    {
                        String table_name = array[1];
                        
                        String table_string = "";
                        
                        f.getChannel().position(0);
                        while (true)
                        {
                            table_string = f.readLine();
                            if (table_string.contains("tables:")) break;            
                            if (f.getChannel().position() >= f.getChannel().size()) break;
                        }

                        boolean exists = false;
                        table_string = "";
                        while (true)
                        {
                            table_string = f.readLine();
                            if (table_string.contains(table_name))
                            {
                                exists = true;
                                break;
                            }

                            if (table_string.contains("data:")) break;            
                            if (f.getChannel().position() >= f.getChannel().size()) break;
                        }
                        
                        
                        ArrayList[] table_data = get_table_info(database_name, table_name);
                        
                        String[] table_array = table_string.split(",");
                       
                        int cols = Integer.valueOf(table_array[1]);
                        
                        
                        list = table_data[0];
                        list2 = table_data[1];
                        
                  
                        int[] lengths = new int[cols];

                        int sum_lengths = 0;

                        for (i = 0; i < cols; i++)
                        {
                            lengths[i] = Integer.valueOf(array[2+i]);

                            sum_lengths += lengths[i];
                        }

                        String string = line.substring(line.length() - sum_lengths, line.length());

                        int p = 0;

                        for (i = 0; i < cols; i++)
                        {
                            int p2 = p + lengths[i];

                            String string2 = string.substring(p, p2);


                            Object[] ob2 = (Object[])list2.get(i);
                            Object[] ob = (Object[])list.get(i);

                            // datatype name value
                            Object[] obj = new Object[]{ob2[1], ob[1], string2};



                            row_data.add(obj);

                            p = p2;
                        }      

                        
                        break;
                    }
                    line = "";
                    beginning_of_line = true;
                }
                else
                {
                    if (beginning_of_line == true)
                    {
                        line_position = starting_position + i;
                    }
                    line += c;
                    beginning_of_line = false;
                }
            }
            
            if (end_of_data == true)
            {
                break;
            }
        
        }
        
        
        
        
        f.close();
        
        return row_data;
    }
    
    
    
    public static void update(String database_name, int record_number, String[] array2) throws Exception
    {
        
        String path = System.getProperty("user.dir") + "\\" + database_name + ".dat";   
        
        
        RandomAccessFile f = new RandomAccessFile(path, "rw");
        
        
        // get the starting position for the data
        f.getChannel().position(0);
        while (true)
        {
            String line = f.readLine();
            if (line.contains("data:")) break;            
            if (f.getChannel().position() >= f.getChannel().size()) break;
        }
        
        
        
        int length = buffer_length;
        boolean end_of_data = false;
        String line = "";
        boolean beginning_of_line = true;
        long line_position = 0;
        
        while (true)
        {
            if (f.getChannel().position() + length > f.getChannel().size())
            {
                length = (int)(f.getChannel().size() - f.getChannel().position());
                end_of_data = true;
            }
        
            byte[] data = new byte[length];
            long starting_position = f.getChannel().position();
            f.read(data);

            for (int i = 0; i < length; i++)
            {
                char c = (char)data[i];
                if (c == '\n')
                {
                    String[] array = line.split(",");

                    if (Integer.valueOf(array[0]) == record_number)
                    {
                        move_everything_up(f, line_position, line_position + line.length()+1);
                        
                        
                        // format insert string
                        
                        line = "";
                        for (int i2 = 0; i2 < 2; i2++)
                        {
                            line += array[i2];
                            line += ",";
                        }
                        for (int i2 = 0; i2 < array2.length; i2++)
                        {
                            line += array2[i2].length();
                            line += ",";
                        }
                        for (int i2 = 0; i2 < array2.length; i2++)
                        {
                            line += array2[i2];
                        }
                        line += "\n";
                        
                        long position = line_position;
                        long position2 = line_position + line.length();
                        
                        move_everything_down(f, line_position, line);
                        
                        // write the string
                        f.getChannel().position(line_position);
                        
                        
                        
                        f.write(line.getBytes());
                        
                        
                        
//                        // check
//            
//                        f.getChannel().position(position);
//
//                        String string = "";
//
//                        while (true)
//                        {
//                            string += (char)f.read();
//
//                            if (f.getChannel().position() >= position2) break;
//                        }
//                        
//                        if (line.equals(string) == false) throw new Exception("interupted operation during update");
//
//                        
                        
                        break;
                    }
                    line = "";
                    beginning_of_line = true;
                }
                else
                {
                    if (beginning_of_line == true)
                    {
                        line_position = starting_position + i;
                    }
                    line += c;
                    beginning_of_line = false;
                }
            }
            
            if (end_of_data == true)
            {
                break;
            }
        
        }
        
        
        
        
        f.close();
    }
    
    
    
    public static void delete(String database_name, int record_number) throws Exception
    {
        
        String path = System.getProperty("user.dir") + "\\" + database_name + ".dat";   
        
        
        RandomAccessFile f = new RandomAccessFile(path, "rw");
        
        
        // get the starting position for the data
        f.getChannel().position(0);
        while (true)
        {
            String line = f.readLine();
            if (line.contains("data:")) break;            
            if (f.getChannel().position() >= f.getChannel().size()) break;
        }
        
        
        
        int length = buffer_length;
        boolean end_of_data = false;
        String line = "";
        boolean beginning_of_line = true;
        long line_position = 0;
        
        while (true)
        {
            if (f.getChannel().position() + length > f.getChannel().size())
            {
                length = (int)(f.getChannel().size() - f.getChannel().position());
                end_of_data = true;
            }
        
            byte[] data = new byte[length];
            long starting_position = f.getChannel().position();
            f.read(data);

            for (int i = 0; i < length; i++)
            {
                char c = (char)data[i];
                if (c == '\n')
                {
                    String[] array = line.split(",");

                    if (Integer.valueOf(array[0]) == record_number)
                    {
                        
                        move_everything_up(f, line_position, line_position + line.length()+1);
                        
//                        
//                        long position = line_position;
//                        long position2 = line_position + line.length()+1;
//                        
//                                               
//                        move_everything_up(f, line_position, line_position + line.length()+1);
//                        
//                        String string = "";
//                        
//                        f.getChannel().position(position);
//                        
//                        while (true)
//                        {
//                            string += (char)f.read();
//                            if (f.getChannel().position() >= position2) break;
//                        }
//                        
//                        
//                        if (line.equals(string) == true) throw new Exception("interupted operation during delete");
//                        
                        
                        
                        break;
                    }
                    line = "";
                    beginning_of_line = true;
                }
                else
                {
                    if (beginning_of_line == true)
                    {
                        line_position = starting_position + i;
                    }
                    line += c;
                    beginning_of_line = false;
                }
            }
            
            if (end_of_data == true)
            {
                break;
            }
        
        }
        
        
        
        
        f.close();
    }
    
    
    
    
    
    public static void select(String database_name, String table_name) throws Exception
    {
        
        
        
        String path = System.getProperty("user.dir") + "\\" + database_name + ".dat";   
        
        
        RandomAccessFile f = new RandomAccessFile(path, "rw");
        
        
        
        
        // get the starting position for the data
        f.getChannel().position(0);
        while (true)
        {
            String line = f.readLine();
            if (line.contains("data:")) break;            
            if (f.getChannel().position() >= f.getChannel().size()) break;
        }
        
            
        int buffer_length = 100000;
        String line = "";
        boolean end_of_data = false;
        
        
        int cols = get_number_of_columns(database_name, table_name);
        
        while (true)
        {
            if (f.getChannel().position() + buffer_length >= f.getChannel().size())
            {
                buffer_length = (int)(f.getChannel().size() - f.getChannel().position());
                end_of_data = true;
            }
            
            byte[] data = new byte[buffer_length];
            f.read(data);
            
            for (int i = 0; i < data.length; i++)
            {
                if ((char)data[i] == '\n')
                {
//                    System.out.println(line);
                    
                    String[] array = line.split(",");
                    

                    if (array[1].equals(table_name))
                    {
                        
                        String[] line_array = line.split(",");
        
        
                        int[] lengths = new int[cols];

                        int sum_lengths = 0;

                        for (int i2 = 0; i2 < cols; i2++)
                        {
                            lengths[i2] = Integer.valueOf(line_array[2+i2]);

                            sum_lengths += lengths[i2];

                        }

                        String string = line.substring(line.length() - sum_lengths, line.length());

                        Object[] arr = new Object[cols];

                        int p = 0;


                        for (int i2 = 0; i2 < cols; i2++)
                        {
                            int p2 = p + lengths[i2];

                            String string2 = string.substring(p, p2);

                            arr[i2] = string2;

                            p = p2;
                        }
                        
                        for (int i2 = 0; i2 < arr.length; i2++)
                        {
                            System.out.print(arr[i2].toString() + " ");
                        }
                        System.out.println();

                    }
                    
                    line = "";
                } 
                else if ((char)data[i] != '\r')
                {
                    line += (char)data[i];
                }
            }
            
            if (end_of_data == true)
            {
                break;
            }
        }
        
        
    }
    
    
    
    
    public static boolean check_consistancy(String database_name, String table_name, int number_of_lines) throws Exception
    {
        boolean result = false;
        
        String path = System.getProperty("user.dir") + "\\" + database_name + ".dat";   
        
        
        RandomAccessFile f = new RandomAccessFile(path, "rw");
        
        
        
        
        // get the starting position for the data
        f.getChannel().position(0);
        while (true)
        {
            String line = f.readLine();
            if (line.contains("data:")) break;            
            if (f.getChannel().position() >= f.getChannel().size()) break;
        }
        
        long starting_position = f.getChannel().position();
        
        
        f.getChannel().position(f.getChannel().size() - 2);
        
        boolean has_data = true;
        
        for (int i = 0; i < number_of_lines; i++)
        {
        
            Database.get_beginning_of_line(f);
            
            if (f.getChannel().position() <= starting_position)
            {
                has_data = false;
                f.readLine();
                break;
            }
            
            f.getChannel().position(f.getChannel().position() - 2);
            
        
        }
        
        
//        System.out.println(f.getChannel().position() + "  " + starting_position);

        {
        
        f.getChannel().position(f.getChannel().position()+2);
        
        
            
        int buffer_length = 100000;
        String line = "";
        boolean end_of_data = false;
        
        Calendar date = Calendar.getInstance();
        date.clear();
        
        Calendar prev_date = null;
        
        
        int cols = get_number_of_columns(database_name, table_name);
        
        
        while (true)
        {
            if (f.getChannel().position() + buffer_length >= f.getChannel().size())
            {
                buffer_length = (int)(f.getChannel().size() - f.getChannel().position());
                end_of_data = true;
            }
            
            byte[] data = new byte[buffer_length];
            f.read(data);
            
            for (int i = 0; i < data.length; i++)
            {
                if ((char)data[i] == '\n')
                {
//                    System.out.println(line);
                    
                    String[] array = line.split(",");
                    

                    if (array[1].equals(table_name))
                    {
                        
                        
                        String[] line_array = line.split(",");
        
        


                        int[] lengths = new int[cols];

                        int sum_lengths = 0;

                        for (int i2 = 0; i2 < cols; i2++)
                        {
                            lengths[i2] = Integer.valueOf(line_array[2+i2]);

                            sum_lengths += lengths[i2];

                        }

                        String string = line.substring(line.length() - sum_lengths, line.length());

                        Object[] arr = new Object[cols];

                        int p = 0;


                        for (int i2 = 0; i2 < cols; i2++)
                        {
                            int p2 = p + lengths[i2];

                            String string2 = string.substring(p, p2);

                            arr[i2] = string2;

                            p = p2;
                        }

                            
                        String date_string = arr[0].toString();
                        
                        date.setTime(Formatters.df.parse(date_string));
                        
                        
                        if (prev_date != null)
                        {
                            if (date.compareTo(prev_date) < 0)
                            {
                                System.out.println("Error:  database is non-consistant  " + line);
                                
                                
                                result = true;
                                
                            }
                        }
                        
                        prev_date = (Calendar)date.clone();
                        
                        
//                        for (int i2 = 0; i2 < arr.length; i2++)
//                        {
//                            System.out.print(arr[i2].toString() + " ");
//                        }
//                        System.out.println();

                    }
                    
                    line = "";
                } 
                else if ((char)data[i] != '\r')
                {
                    line += (char)data[i];
                }
            }
            
//            if (result == true)
//            {
//                break;
//            }
            
            if (end_of_data == true)
            {
                break;
            }
        }
        
         if (result == true)
        {
            System.out.println();
        }
        
        
        }
        
       
        
        f.close();
        
        return result;
        
        
    }
    
    
    
    
    
    
    
    
    public static void select_as_chart(String database_name, String table_name, Chart chart) throws Exception
    {
        
        
        String path = System.getProperty("user.dir") + "\\" + database_name + ".dat";   
        
        
        RandomAccessFile f = new RandomAccessFile(path, "rw");
        
        
        
        
        // get the starting position for the data
        f.getChannel().position(0);
        while (true)
        {
            String line = f.readLine();
            if (line.contains("data:")) break;            
            if (f.getChannel().position() >= f.getChannel().size()) break;
        }
        
        
        
        long starting_position = f.getChannel().position();
        
        if (f.getChannel().size() > starting_position)
        {
        

            long position = f.getChannel().size() - 1;


            int buffer_length = 100000;

            boolean end_of_data = false;

            String line = "";

            ChartPeriod chart_period = null;

            double bid_price = 0;
            double ask_price = 0;
            double mid_point = 0;
            long total_ask_volume = 0;
            long total_bid_volume = 0;

            Calendar date = Calendar.getInstance();
            date.clear();

            int current_time = -1;
            int prev_time = -1;

            Calendar next_date = Calendar.getInstance();
            next_date.clear();
            boolean next_time_set = false;

            int cols = get_number_of_columns(database_name, table_name);

            int days = 0;
            int total_days = -1;

            while (true)
            {
                if (position - buffer_length < starting_position)
                {
                    buffer_length = (int)(position - starting_position);
                    end_of_data = true;
                }

                position -= buffer_length;

                f.getChannel().position(position);

                byte[] data = new byte[buffer_length];
                f.read(data);


                for (int i = buffer_length - 1; i >= 0; i--)
                {
                    if (data[i] == '\n')
                    {
                        String line2 = "";
                        for (int i2 = line.length() - 1; i2 >= 0; i2--)
                        {
                            line2 += line.charAt(i2);
                        }

                        String[] array = line2.split(",");

    //                    System.out.println(line2);

                        if (array[1].equals(table_name))
                        {

                            String[] line_array = line2.split(",");




                            int[] lengths = new int[cols];

                            int sum_lengths = 0;

                            for (int i2 = 0; i2 < cols; i2++)
                            {
                                lengths[i2] = Integer.valueOf(line_array[2+i2]);

                                sum_lengths += lengths[i2];

                            }

                            String string = line2.substring(line2.length() - sum_lengths, line2.length());
                            
                            if (line2.contains("-1") == false)
                            {

                                Object[] arr = new Object[cols];

                                int p = 0;


                                for (int i2 = 0; i2 < cols; i2++)
                                {
                                    int p2 = p + lengths[i2];

                                    String string2 = string.substring(p, p2);

                                    arr[i2] = string2;

                                    p = p2;
                                }

        //                            System.out.println(line2);


                                date.setTimeInMillis(Long.valueOf(arr[0].toString()) * 1000);

                                current_time = date.get(Calendar.DAY_OF_WEEK);

                                if (prev_time != -1)
                                {

                                 //   System.out.println(current_time + "            " + prev_time);

                                    if (current_time != prev_time)
                                    {
                                        days++;



                                        if (total_days > 0 && days >= total_days)
                                        {
    //                                        System.out.println("a");
                                            break;
                                        }
                                    }

                                 //   System.out.println("--------------------------------------");
                                }

                                prev_time = current_time;



                                if (chart.current_time == null)
                                {
                                    chart.current_time = (Calendar)date.clone();
                                }


                                bid_price = Double.valueOf(arr[2].toString());
                                ask_price = Double.valueOf(arr[4].toString());
                                
    
                                total_bid_volume += Integer.valueOf(arr[3].toString());
                                total_ask_volume += Integer.valueOf(arr[5].toString());


                                if (bid_price > 0 && ask_price > 0)
                                {
                                    mid_point = (bid_price + ask_price) / 2;



                                    if (next_time_set == false)
                                    {
                                        next_date = (Calendar)date.clone();
                                        next_date.set(Calendar.HOUR, 0);
                                        next_date.set(Calendar.MINUTE, 0);
                                        next_date.set(Calendar.SECOND, 0);
                                        next_date.set(Calendar.MILLISECOND, 0);

                                        next_date.add(Calendar.DAY_OF_MONTH, 1);

                                        while (true)
                                        {
                                            next_date.add(Calendar.MINUTE, -chart.time_frame.minutes);
                                            if (next_date.compareTo(date) < 0)
                                            {
                                                break;
                                            }

                                        }



                                        chart_period = new ChartPeriod();
                                        chart_period.date = (Calendar)next_date.clone();   
                                        chart_period.open = mid_point;
                                        chart_period.high = mid_point;
                                        chart_period.low = mid_point;
                                        chart_period.close = mid_point;
                                        chart_period.ask_volume = 0;
                                        chart_period.bid_volume = 0;
                                        total_ask_volume = 0;
                                        total_bid_volume = 0;

                                        next_time_set = true;
                                    }
                                    else if (date.compareTo(next_date) < 0)
                                    {                     




                                        if (chart_period != null)
                                        {





        //                                    System.out.println(
        //                                            chart.record_id + " " +
        //                                            chart_period.date.getTime() + " " + 
        //                                            chart_period.open + " " +
        //                                            chart_period.high + " " +
        //                                            chart_period.low + " " +
        //                                            chart_period.close);

        //                                    System.out.println("------------------------------------------------------------------------");
        //                                    System.out.println("------------------------------------------------------------------------");
        //                                    System.out.println("------------------------------------------------------------------------");


        //                                    System.out.println(chart_period.volume);

                                            
                                            // Loading from newest to oldest
                                            
                                            
                                            chart.date[chart.starting_record_id] = chart_period.date.getTimeInMillis();
                                            chart.open[chart.starting_record_id] = chart_period.open;
                                            chart.high[chart.starting_record_id] = chart_period.high;
                                            chart.low[chart.starting_record_id] = chart_period.low;
                                            chart.close[chart.starting_record_id] = chart_period.close;
                                            chart.ask_volume[chart.starting_record_id] = chart_period.ask_volume;
                                            chart.bid_volume[chart.starting_record_id] = chart_period.bid_volume;


                                        }


                                        chart.starting_record_id--;

                                        if (chart.starting_record_id < 0)
                                        {
                                            break;
                                        }

            //                            System.out.println(next_date.getTime());

                                        while (true)
                                        {
                                            next_date.add(Calendar.MINUTE, -chart.time_frame.minutes);
                                            if (next_date.compareTo(date) < 0)
                                            {
                                                break;
                                            }

                                        }

            //                            System.out.println(next_date.getTime());

                                        chart_period = new ChartPeriod();
                                        chart_period.date = (Calendar)next_date.clone();   
                                        chart_period.open = mid_point;
                                        chart_period.high = mid_point;
                                        chart_period.low = mid_point;
                                        chart_period.close = mid_point;
                                        chart_period.ask_volume = 0;
                                        chart_period.bid_volume = 0;
                                        total_ask_volume = 0;
                                        total_bid_volume = 0;


                                    }



                                    if (chart_period != null)
                                    {



                                        if (mid_point > chart_period.high) chart_period.high = mid_point;
                                        if (mid_point < chart_period.low) chart_period.low = mid_point;

                                        chart_period.open = mid_point;
                                        chart_period.ask_volume = total_ask_volume;
                                        chart_period.bid_volume = total_bid_volume;

                                    }


                                }

                            }

                        }





                        line = "";
                    }
                    else if (data[i] != '\r')
                    {
                        line += (char)data[i];
                    }
                }
                
                
                if (total_days > 0 && days >= 1)
                {
                    break;
                }

                if (chart.starting_record_id < 0)
                {
                    break;
                }

                if (end_of_data == true)
                {
                    break;
                }



            }

            if (chart.starting_record_id < 0)
            {
                chart.starting_record_id = 0;
            }


            chart.AssignRecordNumbers();
            
            

            chart.loaded = true;


            f.close();

        }
        else
        {
            chart.loaded = false;
        }
        
    }
    
    
    
    
    
      /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
        
       
      
              
        try
        {
        
            
             if (Database.check_database("price_info") == false)
            {

                Database.create_database("price_info");        


                Database.create_table("price_info", "USD.CAD", new String[]{"date", "description",
                    
                     "bid price", "bid size", "ask price", "ask size"
                
                },
                        
                        new String[]{"datetime", "string",
                            "double", "int", "double", "int"
                        });
                
            }
             
             
            
            
        
        }
        catch (Exception ex)
        {
            ex.printStackTrace();
        }
        
      
      
      
    
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmMain().setVisible(true);
             
               
             
            }
        });
        
        
    }
    
    
    
    
    
    
    
    
    
//
//    /**
//     * @param args the command line arguments
//     */
//    public static void main(String[] args) {
//        // TODO code application logic here
//        
//        try
//        {
////            create_database("database");
////        
////            create_table("database", "Clients", new String[]{"Name", "Address"}, new String[]{"string", "string"});
////            create_table("database", "Contacts", new String[]{"Name", "Phone"}, new String[]{"string", "string"});
////        
////            for (int i = 0; i < 100; i++)
////            insert("database", "Clients", new String[]{"John Smith" + String.valueOf(i), "1 front street"});  
////            
//            
//       //     new_test_database();
//          
//         //   select("database", "Contacts", 8000, 100);
//            
//            
//        //   update("database", 71184, new String[]{"bbc", "bbb good morning world, good morning everyone"});
//            
////            for (int i = 0; i < 2000; i++)
////            delete("database", i);
//            
//        }
//        catch (Exception ex)
//        {
//            ex.printStackTrace();
//        }
//        
//    }
    
}
